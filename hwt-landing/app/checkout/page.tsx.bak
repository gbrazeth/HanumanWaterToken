"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { ethers } from "ethers"
import { 
  TOKEN_CONTRACT_ADDRESS, 
  PRESALE_ADDRESS, 
  USDT_ADDRESS, 
  TOKEN_ABI, 
  PRESALE_ABI, 
  USDT_ABI,
  NETWORK_CONFIG 
} from "../../config/contract";
// Certifique-se que TOKEN_CONTRACT_ADDRESS está atualizado para o endereço do HanumanWaterTokenV2 na Sepolia
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { ArrowLeft, AlertCircle, Check } from "lucide-react"

export default function CheckoutPage() {
  // DEBUG: Exibir o valor importado do endereço do contrato
  console.log("[DEBUG] TOKEN_CONTRACT_ADDRESS:", TOKEN_CONTRACT_ADDRESS);
  const [tokenAmount, setTokenAmount] = useState<string>("1000")
  const [usdAmount, setUsdAmount] = useState<string>("2000")
  const [waterAmount, setWaterAmount] = useState<string>("1000")
  const [paymentMethod, setPaymentMethod] = useState<string>("eth")
  const [isConnected, setIsConnected] = useState<boolean>(false)
  const [walletAddress, setWalletAddress] = useState<string>("")
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [success, setSuccess] = useState<boolean>(false)
  const [error, setError] = useState<string | null>(null)
  const [ethBalance, setEthBalance] = useState<string>("0")
  const [usdtBalance, setUsdtBalance] = useState<string>("0")
  const [isKycApproved, setIsKycApproved] = useState<boolean>(false)
  const [isContractPaused, setIsContractPaused] = useState<boolean>(false)
  const [isPresalePaused, setIsPresalePaused] = useState<boolean>(false)
  const [tokensSold, setTokensSold] = useState<string>("0")
  const [tokenPrice, setTokenPrice] = useState<string>("2")
  const [pixCode, setPixCode] = useState<string>("")

  // Dados do cartão de crédito
  const [cardNumber, setCardNumber] = useState<string>("")
  const [cardName, setCardName] = useState<string>("")
  const [cardExpiry, setCardExpiry] = useState<string>("")
  const [cardCVC, setCardCVC] = useState<string>("")

  // Efeito para verificar se o Metamask está conectado
  useEffect(() => {
    checkIfWalletIsConnected()
  }, [])

  // Função para verificar e trocar para a rede correta
  const checkAndSwitchNetwork = async () => {
    try {
      if (!window.ethereum) throw new Error("MetaMask não encontrado")

      // Verificar se está na rede Sepolia
      const chainId = await window.ethereum.request({ method: "eth_chainId" })
      const sepoliaChainId = NETWORK_CONFIG.chainId // Usando o chainId da configuração

      if (chainId !== sepoliaChainId) {
        try {
          // Solicitar troca para Sepolia
          await window.ethereum.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: sepoliaChainId }],
          })
          return true
        } catch (switchError: any) {
          // Se a rede não estiver disponível, adicionar
          if (switchError.code === 4902) {
            try {
              await window.ethereum.request({
                method: "wallet_addEthereumChain",
                params: [
                  {
                    chainId: sepoliaChainId,
                    chainName: NETWORK_CONFIG.chainName,
                    nativeCurrency: NETWORK_CONFIG.nativeCurrency,
                    rpcUrls: NETWORK_CONFIG.rpcUrls,
                    blockExplorerUrls: NETWORK_CONFIG.blockExplorerUrls,
                  },
                ],
              })
              return true
            } catch (addError) {
              console.error("Erro ao adicionar a rede Sepolia:", addError)
              setError("Não foi possível adicionar a rede Sepolia. Por favor, adicione manualmente.")
              return false
            }
          }
          console.error("Erro ao trocar para a rede Sepolia:", switchError)
          setError("Por favor, troque para a rede Sepolia para continuar.")
          return false
        }
      }
      return true
    } catch (error) {
      console.error("Erro ao verificar/trocar rede:", error)
      setError("Erro ao verificar/trocar rede. Por favor, verifique se o MetaMask está instalado e conectado.")
      return false
    }
  }

  // Função para verificar se o Metamask está conectado
  const checkIfWalletIsConnected = async () => {
    try {
      if (typeof window.ethereum !== "undefined") {
        // Primeiro verificar e trocar para a rede correta
        const networkOk = await checkAndSwitchNetwork()
        if (!networkOk) return

        const accounts = await window.ethereum.request({ method: "eth_accounts" })

        if (accounts.length > 0) {
          setIsConnected(true)
          setWalletAddress(accounts[0])

          // Obter saldos
          await getBalances(accounts[0])
        }
      }
    } catch (error) {
      console.error("Erro ao verificar conexão com a carteira:", error)
    }
  }

  // Função para verificar se os contratos estão pausados
  const checkContractStatus = async () => {
    try {
      if (!window.ethereum) throw new Error("MetaMask não encontrado")
      const provider = new ethers.providers.Web3Provider(window.ethereum as any)
      
      try {
        // Verificar status do token
        const tokenContract = new ethers.Contract(TOKEN_CONTRACT_ADDRESS, TOKEN_ABI, provider)
        const paused = await tokenContract.paused()
        setIsContractPaused(paused)
        console.log(`Status do contrato HanumanWaterTokenV2: ${paused ? 'Pausado' : 'Ativo'}`)
        
        // Verificar status da pré-venda
        const presaleContract = new ethers.Contract(PRESALE_ADDRESS, PRESALE_ABI, provider)
        const presalePaused = await presaleContract.paused()
        setIsPresalePaused(presalePaused)
        console.log(`Status do contrato HanumanWaterTokenPresale: ${presalePaused ? 'Pausado' : 'Ativo'}`)
        
        // Obter o preço do token
        const tokenPriceUsd = await tokenContract.TOKEN_PRICE_USD()
        setTokenPrice(ethers.utils.formatUnits(tokenPriceUsd, 0))
        console.log(`Preço do token: $${ethers.utils.formatUnits(tokenPriceUsd, 0)}`)
        
        // Obter quantidade de tokens vendidos
        const sold = await presaleContract.totalTokensSold()
        setTokensSold(ethers.utils.formatUnits(sold, 18))
        console.log(`Total de tokens vendidos: ${ethers.utils.formatUnits(sold, 18)} HWT`)
      } catch (error) {
        console.error("Erro ao verificar status dos contratos:", error)
      }
    } catch (error) {
      console.error("Erro ao verificar status dos contratos:", error)
    }
  }
  
  // Função para solicitar aprovação KYC
  const requestKycApproval = async () => {
    try {
      setIsLoading(true)
      setError(null)
      
      if (!window.ethereum) throw new Error("MetaMask não encontrado")
      if (!walletAddress) throw new Error("Conecte sua carteira primeiro")
      
      // Verificar e trocar para a rede correta
      const networkOk = await checkAndSwitchNetwork()
      if (!networkOk) {
        setIsLoading(false)
        return
      }
      
      const provider = new ethers.providers.Web3Provider(window.ethereum as any)
      const signer = provider.getSigner()
      
      // Criar uma instância do contrato com o signer para poder enviar transações
      const tokenContract = new ethers.Contract(TOKEN_CONTRACT_ADDRESS, TOKEN_ABI, signer)
      
      // Verificar se já tem aprovação KYC
      const kycStatus = await tokenContract.kycApproved(walletAddress)
      if (kycStatus) {
        setError("Sua carteira já possui aprovação KYC.")
        setIsLoading(false)
        return
      }
      
      // Enviar solicitação de KYC (isso depende de como o contrato implementa essa funcionalidade)
      // Aqui estamos assumindo que existe um método requestKycApproval no contrato
      // Se não existir, essa parte precisa ser adaptada para o fluxo real de KYC do projeto
      try {
        // Verificar se o contrato tem um método requestKycApproval
        if (typeof tokenContract.requestKycApproval === 'function') {
          // Se existir, chamar o método
          const tx = await tokenContract.requestKycApproval()
          await tx.wait()
          
          setSuccess(true)
          setError(null)
          alert("Solicitação de KYC enviada com sucesso! Aguarde a aprovação pela equipe.")
        } else {
          // Se não existir, informar o usuário sobre o processo manual
          alert("Para solicitar aprovação KYC, entre em contato com a equipe do projeto pelo e-mail suporte@hanumanwater.com")
        }
      } catch (error: any) {
        console.error("Erro ao solicitar KYC:", error)
        setError(`Erro ao solicitar KYC: ${error.message || "Erro desconhecido"}. Entre em contato com a equipe do projeto.`)
      }
      
      setIsLoading(false)
    } catch (error: any) {
      console.error("Erro ao solicitar KYC:", error)
      setError(`Erro: ${error.message || "Erro desconhecido"}`)
      setIsLoading(false)
    }
  }
  
  // Função para obter saldos
  const getBalances = async (address: string) => {
    try {
      if (!window.ethereum) throw new Error("MetaMask não encontrado")
      const provider = new ethers.providers.Web3Provider(window.ethereum as any)

      // Primeiro verificar e trocar para a rede correta
      const networkOk = await checkAndSwitchNetwork()
      if (!networkOk) return

      // Obter saldo de ETH
      const ethBalance = await provider.getBalance(address)
      setEthBalance(ethers.utils.formatEther(ethBalance))

      try {
        // Obter saldo de USDT
        const usdtContract = new ethers.Contract(USDT_ADDRESS, USDT_ABI, provider)
        const usdtBalance = await usdtContract.balanceOf(address)
        setUsdtBalance(ethers.utils.formatUnits(usdtBalance, 6)) // USDT tem 6 casas decimais
      } catch (usdtError) {
        console.error("Erro ao obter saldo de USDT:", usdtError)
        // Não mostrar erro para o usuário, apenas definir saldo como zero
        // já que é normal não ter USDT
        setUsdtBalance("0")
      }
      
      try {
        // Obter saldo de HWT
        const tokenContract = new ethers.Contract(TOKEN_CONTRACT_ADDRESS, TOKEN_ABI, provider)
        const tokenBalance = await tokenContract.balanceOf(address)
        console.log(`Saldo HWT: ${ethers.utils.formatUnits(tokenBalance, 18)} HWT`)
        
        // Verificar se o usuário tem aprovação KYC
        const kycStatus = await tokenContract.kycApproved(address)
        console.log(`Status KYC: ${kycStatus ? 'Aprovado' : 'Não aprovado'}`)
        setIsKycApproved(kycStatus)
        
        // Verificar status dos contratos
        await checkContractStatus()
      } catch (tokenError) {
        console.error("Erro ao obter informações do token HWT:", tokenError)
        setIsKycApproved(false)
      }
    } catch (error) {
      console.error("Erro ao obter saldos:", error)
      setError("Erro ao obter saldos. Por favor, verifique se está conectado à rede Sepolia.")
    }
  }

  // Função para conectar ao Metamask
  const connectWallet = async () => {
    try {
      if (typeof window.ethereum !== "undefined") {
        // Primeiro verificar e trocar para a rede correta
        const networkOk = await checkAndSwitchNetwork()
        if (!networkOk) return

        setIsLoading(true)
        const accounts = await window.ethereum.request({
          method: "eth_requestAccounts",
        })
        if (accounts.length > 0) {
          setIsConnected(true)
          setWalletAddress(accounts[0])

          // Obter saldos
          await getBalances(accounts[0])
        }
      } else {
        setError("Por favor, instale a extensão Metamask para conectar sua carteira.")
      }
    } catch (error) {
      console.error("Erro ao conectar com a carteira:", error)
      setError("Erro ao conectar com a carteira. Por favor, tente novamente.")
    } finally {
      setIsLoading(false)
    }
  }

  // Função para atualizar o valor em USD e água quando o número de tokens mudar
  const handleTokenAmountChange = (value: string) => {
    setTokenAmount(value)

    // Calcular valor em USD (1 HWT = $2)
    const usdValue = Number.parseFloat(value) * 2
    setUsdAmount(usdValue.toString())

    // Calcular quantidade de água (1 HWT = 1 litro)
    setWaterAmount(value)
  }

  // Função para verificar se os contratos estão configurados
  const checkContractAddresses = () => {
    if (!TOKEN_CONTRACT_ADDRESS || !PRESALE_ADDRESS || !USDT_ADDRESS) {
      setError("Endereços dos contratos não configurados corretamente")
      return false
    }
    console.log("Usando contratos:")
    console.log(`- HanumanWaterTokenV2: ${TOKEN_CONTRACT_ADDRESS}`)
    console.log(`- HanumanWaterTokenPresale: ${PRESALE_ADDRESS}`)
    console.log(`- USDT: ${USDT_ADDRESS}`)
    return true
  }

  // Função para comprar tokens com ETH
  const buyWithETH = async () => {
    try {
      if (typeof window.ethereum !== "undefined") {
        setIsLoading(true)
        setError(null)

        // Verificar se os contratos estão configurados
        if (!checkContractAddresses()) {
          setIsLoading(false)
          return
        }
        
        // Verificar se os contratos estão pausados
        if (isContractPaused || isPresalePaused) {
          setError("As operações de compra estão temporariamente pausadas. Por favor, tente novamente mais tarde.")
          setIsLoading(false)
          return
        }

        // Verificar e trocar para a rede correta
        const networkOk = await checkAndSwitchNetwork()
        if (!networkOk) {
          setIsLoading(false)
          return
        }

        if (!window.ethereum) throw new Error("MetaMask não encontrado")
        const provider = new ethers.providers.Web3Provider(window.ethereum as any)
        const signer = provider.getSigner()

        // Criar contrato de pré-venda
        const presaleContract = new ethers.Contract(PRESALE_ADDRESS, PRESALE_ABI, signer)
        
        // Obter o preço ETH/USD diretamente do contrato usando o oráculo Chainlink
        try {
          // Calcular o valor em ETH usando a função do contrato
          const usdValue = Number.parseFloat(usdAmount)
          const tokensAmount = ethers.utils.parseUnits(tokenAmount, 18) // HWT tem 18 casas decimais
          
          // Obter o preço atual do ETH em USD do oráculo Chainlink
          const ethUsdPrice = await presaleContract.getEthUsdPrice()
          console.log(`Preço ETH/USD atual: $${ethers.utils.formatUnits(ethUsdPrice, 8)}`)
          
          // Calcular o valor em ETH necessário para comprar os tokens
          const tokenPriceUsd = 2 // $2 por token
          const totalUsdNeeded = Number(tokenAmount) * tokenPriceUsd
          const ethNeeded = totalUsdNeeded / Number(ethers.utils.formatUnits(ethUsdPrice, 8))
          const ethAmount = ethers.utils.parseEther(ethNeeded.toFixed(18))
          
          console.log(`Comprando ${tokenAmount} HWT por aproximadamente ${ethers.utils.formatEther(ethAmount)} ETH`)
          
          // Executar transação com o valor calculado
          const tx = await presaleContract.buyWithETH({
            value: ethAmount,
          })

          // Aguardar confirmação
          await tx.wait()

          setSuccess(true);
          window.dispatchEvent(new Event('hwt-balance-updated'))
        } catch (priceError) {
          console.error("Erro ao calcular preço ETH/USD:", priceError)
          
          // Fallback para cálculo manual se o oráculo falhar
          const usdValue = Number.parseFloat(usdAmount)
          const ethPrice = 3000 // Preço estimado do ETH em USD como fallback
          const ethValue = usdValue / ethPrice
          
          console.log(`Usando cálculo manual: ${usdValue}$ = ${ethValue} ETH (preço estimado: $${ethPrice}/ETH)`)
          
          // Executar transação com o valor calculado manualmente
          const tx = await presaleContract.buyWithETH({
            value: ethers.utils.parseEther(ethValue.toString()),
          })

          // Aguardar confirmação
          await tx.wait()

          setSuccess(true);
          window.dispatchEvent(new Event('hwt-balance-updated'))
        }
      }
    } catch (error) {
      console.error("Erro ao comprar tokens com ETH:", error)
      setError("Erro ao processar a compra. Por favor, tente novamente.")
    } finally {
      setIsLoading(false)
    }
  }

  // Função para comprar tokens com USDT
  const buyWithUSDT = async () => {
    try {
      if (typeof window.ethereum !== "undefined") {
        setIsLoading(true)
        setError(null)

        // Verificar se os contratos estão configurados
        if (!checkContractAddresses()) {
          setIsLoading(false)
          return
        }
        
        // Verificar se os contratos estão pausados
        if (isContractPaused || isPresalePaused) {
          setError("As operações de compra estão temporariamente pausadas. Por favor, tente novamente mais tarde.")
          setIsLoading(false)
          return
        }

        // Verificar e trocar para a rede correta
        const networkOk = await checkAndSwitchNetwork()
        if (!networkOk) {
          setIsLoading(false)
          return
        }

        if (!window.ethereum) throw new Error("MetaMask não encontrado")
        const provider = new ethers.providers.Web3Provider(window.ethereum as any)
        const signer = provider.getSigner()

        // Criar contratos
        const usdtContract = new ethers.Contract(USDT_ADDRESS, USDT_ABI, signer)
        const presaleContract = new ethers.Contract(PRESALE_ADDRESS, PRESALE_ABI, signer)

        // Calcular valor em tokens usando a função do contrato
        const tokensAmount = ethers.utils.parseUnits(tokenAmount, 18) // HWT tem 18 casas decimais
        
        try {
          // Calcular o valor em USDT necessário (1:1 com USD)
          const tokenPriceUsd = 2 // $2 por token
          const totalUsdNeeded = Number(tokenAmount) * tokenPriceUsd
          const usdtNeeded = ethers.utils.parseUnits(totalUsdNeeded.toString(), 6) // USDT tem 6 casas decimais
          console.log(`Comprando ${tokenAmount} HWT por ${ethers.utils.formatUnits(usdtNeeded, 6)} USDT`)
          
          // Verificar allowance
          const allowance = await usdtContract.allowance(walletAddress, PRESALE_ADDRESS)
          
          // Se necessário, aprovar o contrato para gastar USDT
          if (allowance.lt(usdtNeeded)) {
            console.log(`Aprovando gasto de ${ethers.utils.formatUnits(usdtNeeded, 6)} USDT`)
            const approveTx = await usdtContract.approve(PRESALE_ADDRESS, usdtNeeded)
            await approveTx.wait()
          }

          // Executar a compra usando a quantidade calculada
          const tx = await presaleContract.buyWithUSDT(usdtNeeded)
          await tx.wait()

          setSuccess(true);
          window.dispatchEvent(new Event('hwt-balance-updated'))
        } catch (calculationError) {
          console.error("Erro ao calcular USDT necessário:", calculationError)
          
          // Fallback para cálculo manual se a função do contrato falhar
          const usdtValue = Number.parseFloat(usdAmount)
          const usdtAmount = ethers.utils.parseUnits(usdtValue.toString(), 6) // USDT tem 6 casas decimais
          
          console.log(`Usando cálculo manual: ${tokenAmount} HWT = $${usdtValue} = ${ethers.utils.formatUnits(usdtAmount, 6)} USDT`)
          
          // Verificar allowance
          const allowance = await usdtContract.allowance(walletAddress, PRESALE_ADDRESS)
          
          // Se necessário, aprovar o contrato para gastar USDT
          if (allowance.lt(usdtAmount)) {
            const approveTx = await usdtContract.approve(PRESALE_ADDRESS, usdtAmount)
            await approveTx.wait()
          }

          // Executar a compra
          const tx = await presaleContract.buyWithUSDT(usdtAmount)
          await tx.wait()

          setSuccess(true);
          window.dispatchEvent(new Event('hwt-balance-updated'))
        }
      }
    } catch (error) {
      console.error("Erro ao comprar tokens com USDT:", error)
      setError("Erro ao processar a compra. Por favor, tente novamente.")
    } finally {
      setIsLoading(false)
    }
  }

  // Função para processar pagamento com PIX
  const processPixPayment = () => {
    // Em produção, isso geraria um código PIX real
    setPixCode(
      "00020126580014BR.GOV.BCB.PIX0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913Hanuman Water6008Sao Paulo62070503***63041234",
    )

    // Simular processamento
    setIsLoading(true)
    setTimeout(() => {
      setIsLoading(false)
    }, 2000)
  }

  // Função para processar pagamento com cartão de crédito
  const processCreditCardPayment = () => {
    // Validar dados do cartão
    if (!cardNumber || !cardName || !cardExpiry || !cardCVC) {
      setError("Por favor, preencha todos os campos do cartão.")
      return
    }

    // Em produção, isso processaria o pagamento com cartão
    setIsLoading(true)

    // Simular processamento
    setTimeout(() => {
      setIsLoading(false)
      setSuccess(true);
      window.dispatchEvent(new Event('hwt-balance-updated'))
    }, 2000)
  }

  // Função para processar o pagamento com base no método selecionado
  const processPayment = () => {
    setError(null)

    switch (paymentMethod) {
      case "eth":
        buyWithETH()
        break
      case "usdt":
        buyWithUSDT()
        break
      case "pix":
        processPixPayment()
        break
      case "credit_card":
        processCreditCardPayment()
        break
      default:
        setError("Método de pagamento inválido.")
    }
  }

  return (
    <div className="min-h-screen flex flex-col bg-logoBg">
      {/* Navigation */}
      <header className="sticky top-0 z-50 w-full border-b bg-logoBg/95 backdrop-blur supports-[backdrop-filter]:bg-logoBg/60">
        <div className="container flex h-16 items-center justify-between">
          <div className="flex items-center gap-2">
            <Image
              src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/WhatsApp%20Image%202025-02-11%20at%2012.29.35-daDbj654dksYpGWva5AmTu4AfzMKUq.jpeg"
              alt="Logo do Hanuman Water Token"
              width={40}
              height={40}
              className="rounded-full"
            />
            <span className="text-xl font-bold text-primary">HWT</span>
          </div>
          <Link href="/" className="flex items-center text-sm font-medium hover:text-primary">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Voltar para a página inicial
          </Link>
        </div>
      </header>

      <main className="flex-1 py-12">
        <div className="container px-4">
          <div className="mb-8">
            <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl text-primary">Comprar HWT</h1>
            <p className="mt-2 text-muted-foreground">
              Adquira tokens HWT e faça parte da revolução na gestão de recursos hídricos.
            </p>
          </div>

          {success ? (
            <Card className="max-w-2xl mx-auto">
              <CardContent className="pt-6">
                <div className="flex flex-col items-center justify-center py-12 text-center">
                  <div className="mb-4 rounded-full bg-green-100 p-3">
                    <Check className="h-8 w-8 text-green-600" />
                  </div>
                  <h2 className="text-2xl font-bold text-primary mb-2">Compra Realizada com Sucesso!</h2>
                  <p className="text-muted-foreground mb-6">
                    Sua compra de {tokenAmount} HWT foi processada com sucesso. Os tokens serão enviados para sua
                    carteira em breve.
                  </p>
                  <Button
                    className="mb-6"
                    variant="secondary"
                    onClick={async () => {
                      if (window.ethereum) {
                        try {
                          await window.ethereum.request({
                            method: 'wallet_watchAsset',
                            params: {
                              type: 'ERC20',
                              options: {
                                address: TOKEN_CONTRACT_ADDRESS,
                                symbol: 'HWT',
                                decimals: 18,
                              },
                            },
                          } as any);
                        } catch (err) {
                          alert('Erro ao adicionar token na Metamask.');
                        }
                      } else {
                        alert('MetaMask não encontrada.');
                      }
                    }}
                  >
                    Adicionar HWT à MetaMask
                  </Button>
                  <div className="flex gap-4">
                    <Button asChild>
                      <Link href="/">Voltar para a página inicial</Link>
                    </Button>
                    <Button variant="outline" onClick={() => setSuccess(false)}>
                      Fazer outra compra
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-8 md:grid-cols-2">
              <div>
                <Card>
                  <CardHeader>
                    <CardTitle>Detalhes da Compra</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="token-amount">Quantidade de Tokens (HWT)</Label>
                        <Input
                          id="token-amount"
                          type="number"
                          min="1"
                          value={tokenAmount}
                          onChange={(e) => handleTokenAmountChange(e.target.value)}
                          className="text-lg"
                        />
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label>Valor em USD</Label>
                          <div className="p-2 border rounded-md bg-muted">
                            <span className="text-lg font-medium">${usdAmount}</span>
                          </div>
                        </div>
                        <div className="flex flex-col space-y-2">
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-500">Saldo ETH:</span>
                            <span className="text-sm font-medium">{Number(ethBalance).toFixed(4)} ETH</span>
                          </div>
                            </span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-500">Preço do Token:</span>
                            <span className="text-sm font-medium">${tokenPrice} USD</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-500">Tokens Vendidos:</span>
                            <span className="text-sm font-medium">{Number(tokensSold).toLocaleString()} HWT</span>
                          </div>
                        </div>
                      </div>

                      <div className="pt-4">
                        <div className="rounded-md bg-muted p-4">
                          <div className="flex">
                            <AlertCircle className="h-5 w-5 text-primary mr-3" />
                            <div>
                              <p className="text-sm text-muted-foreground">
                                Para receber água da fonte Hanuman, é necessário adquirir no mínimo 100 tokens HWT
                                (equivalente a 1 metro cúbico de água).
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <div>
                <Card>
                  <CardHeader>
                    <CardTitle>Método de Pagamento</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Tabs defaultValue="crypto" className="w-full">
                      <TabsList className="grid w-full grid-cols-2">
                        <TabsTrigger value="crypto">Criptomoedas</TabsTrigger>
                        <TabsTrigger value="fiat">Moeda Fiduciária</TabsTrigger>
                      </TabsList>

                      <TabsContent value="crypto" className="space-y-4 mt-4">
                        <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod} className="space-y-3">
                          <div className="flex items-center space-x-2 border rounded-md p-3">
                            <RadioGroupItem value="eth" id="eth" />
                            <Label htmlFor="eth" className="flex-1 cursor-pointer">
                              <div className="flex justify-between items-center">
                                <span>Ethereum (ETH)</span>
                                {isConnected && (
                                  <span className="text-sm text-muted-foreground">
                                    Saldo: {Number.parseFloat(ethBalance).toFixed(4)} ETH
                                  </span>
                                )}
                              </div>
                            </Label>
                          </div>

                          <div className="flex items-center space-x-2 border rounded-md p-3">
                            <RadioGroupItem value="usdt" id="usdt" />
                            <Label htmlFor="usdt" className="flex-1 cursor-pointer">
                              <div className="flex justify-between items-center">
                                <span>USDT</span>
                                {isConnected && (
                                  <span className="text-sm text-muted-foreground">
                                    Saldo: {Number.parseFloat(usdtBalance).toFixed(2)} USDT
                                  </span>
                                )}
                              </div>
                            </Label>
                          </div>
                        </RadioGroup>

                        {!isConnected ? (
                          <Button onClick={connectWallet} className="w-full" disabled={isLoading}>
                            {isLoading ? "Conectando..." : "Conectar Carteira"}
                          </Button>
                        ) : (
                          <Button onClick={processPayment} className="w-full bg-primary" disabled={isLoading}>
                            {isLoading ? "Processando..." : "Comprar Tokens"}
                          </Button>
                        )}
                      </TabsContent>

                      <TabsContent value="fiat" className="space-y-4 mt-4">
                        <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod} className="space-y-3">
                          <div className="flex items-center space-x-2 border rounded-md p-3">
                            <RadioGroupItem value="pix" id="pix" />
                            <Label htmlFor="pix" className="flex-1 cursor-pointer">
                              PIX
                            </Label>
                          </div>

                          <div className="flex items-center space-x-2 border rounded-md p-3">
                            <RadioGroupItem value="credit_card" id="credit_card" />
                            <Label htmlFor="credit_card" className="flex-1 cursor-pointer">
                              Cartão de Crédito
                            </Label>
                          </div>
                        </RadioGroup>

                        {paymentMethod === "pix" && (
                          <div className="space-y-4">
                            {pixCode ? (
                              <div className="flex flex-col items-center p-4 border rounded-md">
                                <div className="mb-4 bg-white p-4 rounded-md">
                                  <Image
                                    src="/placeholder.svg?height=200&width=200"
                                    alt="Código QR PIX"
                                    width={200}
                                    height={200}
                                    className="mx-auto"
                                  />
                                </div>
                                <p className="text-sm text-center text-muted-foreground mb-2">
                                  Escaneie o código QR com seu aplicativo bancário ou copie o código PIX abaixo:
                                </p>
                                <div className="w-full p-2 bg-muted rounded-md text-xs overflow-auto">
                                  <code>{pixCode}</code>
                                </div>
                              </div>
                            ) : (
                              <Button onClick={processPayment} className="w-full bg-primary" disabled={isLoading}>
                                {isLoading ? "Gerando código..." : "Gerar Código PIX"}
                              </Button>
                            )}
                          </div>
                        )}

                        {paymentMethod === "credit_card" && (
                          <div className="space-y-4">
                            <div className="space-y-2">
                              <Label htmlFor="card-number">Número do Cartão</Label>
                              <Input
                                id="card-number"
                                placeholder="0000 0000 0000 0000"
                                value={cardNumber}
                                onChange={(e) => setCardNumber(e.target.value)}
                              />
                            </div>

                            <div className="space-y-2">
                              <Label htmlFor="card-name">Nome no Cartão</Label>
                              <Input
                                id="card-name"
                                placeholder="Nome completo"
                                value={cardName}
                                onChange={(e) => setCardName(e.target.value)}
                              />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <Label htmlFor="card-expiry">Data de Validade</Label>
                                <Input
                                  id="card-expiry"
                                  placeholder="MM/AA"
                                  value={cardExpiry}
                                  onChange={(e) => setCardExpiry(e.target.value)}
                                />
                              </div>

                              <div className="space-y-2">
                                <Label htmlFor="card-cvc">CVC</Label>
                                <Input
                                  id="card-cvc"
                                  placeholder="123"
                                  value={cardCVC}
                                  onChange={(e) => setCardCVC(e.target.value)}
                                />
                              </div>
                            </div>

                            <Button onClick={processPayment} className="w-full bg-primary" disabled={isLoading}>
                              {isLoading ? "Processando..." : "Pagar com Cartão"}
                            </Button>
                          </div>
                        )}
                      </TabsContent>
                    </Tabs>

                    {error && (
                      <Alert variant="destructive" className="mt-4">
                        <AlertCircle className="h-4 w-4" />
                        <AlertTitle>Erro</AlertTitle>
                        <AlertDescription>{error}</AlertDescription>
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </div>
      </main>

      <footer className="border-t border-primary/20 bg-logoBg">
        <div className="container px-4 py-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center gap-2 mb-4 md:mb-0">
              <Image
                src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/WhatsApp%20Image%202025-02-11%20at%2012.29.35-daDbj654dksYpGWva5AmTu4AfzMKUq.jpeg"
                alt="Logo do Hanuman Water Token"
                width={30}
                height={30}
                className="rounded-full"
              />
              <span className="text-lg font-bold text-primary">HWT</span>
            </div>
            <p className="text-sm text-muted-foreground">
              © {new Date().getFullYear()} HanumanWater Token. Todos os direitos reservados.
            </p>
          </div>
        </div>
      </footer>
    </div>
  )
}

