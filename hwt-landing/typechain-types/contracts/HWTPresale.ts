/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HWTPresaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TOKEN_PRICE_USD"
      | "buyWithETH"
      | "buyWithUSDT"
      | "ethPriceUSD"
      | "hwtToken"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateEthPrice"
      | "usdtToken"
      | "withdrawETH"
      | "withdrawUSDT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TokensPurchasedWithETH"
      | "TokensPurchasedWithUSDT"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TOKEN_PRICE_USD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethPriceUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hwtToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEthPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_PRICE_USD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyWithETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hwtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDT",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedWithETHEvent {
  export type InputTuple = [
    buyer: AddressLike,
    ethAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    ethAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    ethAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedWithUSDTEvent {
  export type InputTuple = [
    buyer: AddressLike,
    usdtAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    usdtAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    usdtAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HWTPresale extends BaseContract {
  connect(runner?: ContractRunner | null): HWTPresale;
  waitForDeployment(): Promise<this>;

  interface: HWTPresaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TOKEN_PRICE_USD: TypedContractMethod<[], [bigint], "view">;

  buyWithETH: TypedContractMethod<[], [void], "payable">;

  buyWithUSDT: TypedContractMethod<
    [usdtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ethPriceUSD: TypedContractMethod<[], [bigint], "view">;

  hwtToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEthPrice: TypedContractMethod<
    [_newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdtToken: TypedContractMethod<[], [string], "view">;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawUSDT: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TOKEN_PRICE_USD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyWithETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "buyWithUSDT"
  ): TypedContractMethod<[usdtAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethPriceUSD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hwtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEthPrice"
  ): TypedContractMethod<[_newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUSDT"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchasedWithETH"
  ): TypedContractEvent<
    TokensPurchasedWithETHEvent.InputTuple,
    TokensPurchasedWithETHEvent.OutputTuple,
    TokensPurchasedWithETHEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchasedWithUSDT"
  ): TypedContractEvent<
    TokensPurchasedWithUSDTEvent.InputTuple,
    TokensPurchasedWithUSDTEvent.OutputTuple,
    TokensPurchasedWithUSDTEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensPurchasedWithETH(address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedWithETHEvent.InputTuple,
      TokensPurchasedWithETHEvent.OutputTuple,
      TokensPurchasedWithETHEvent.OutputObject
    >;
    TokensPurchasedWithETH: TypedContractEvent<
      TokensPurchasedWithETHEvent.InputTuple,
      TokensPurchasedWithETHEvent.OutputTuple,
      TokensPurchasedWithETHEvent.OutputObject
    >;

    "TokensPurchasedWithUSDT(address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedWithUSDTEvent.InputTuple,
      TokensPurchasedWithUSDTEvent.OutputTuple,
      TokensPurchasedWithUSDTEvent.OutputObject
    >;
    TokensPurchasedWithUSDT: TypedContractEvent<
      TokensPurchasedWithUSDTEvent.InputTuple,
      TokensPurchasedWithUSDTEvent.OutputTuple,
      TokensPurchasedWithUSDTEvent.OutputObject
    >;
  };
}
