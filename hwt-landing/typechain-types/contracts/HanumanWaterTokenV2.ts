/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HanumanWaterTokenV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BATCH_SIZE"
      | "MAX_COMMUNITY_ALLOCATION"
      | "MAX_CONSULTANTS_ALLOCATION"
      | "MAX_LIQUIDITY_ALLOCATION"
      | "MAX_PARTNERSHIPS_ALLOCATION"
      | "MAX_PRESALE_DURATION"
      | "MAX_PUBLIC_ALLOCATION"
      | "MAX_SUPPLY"
      | "MAX_TEAM_ALLOCATION"
      | "MIN_REDEMPTION_AMOUNT"
      | "PUBLIC_ALLOCATION_PERCENTAGE"
      | "TOKEN_PRICE_USD"
      | "TOTAL_PRESALE_TOKENS"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "batchUpdateKycStatus"
      | "burn"
      | "burnFrom"
      | "cancelWaterRedemption"
      | "confirmWaterDelivery"
      | "decimals"
      | "deliveryOperator"
      | "developmentTeamWallet"
      | "extendPresale"
      | "getWaterRedemptionStatus"
      | "kycApproved"
      | "liquidityReserveWallet"
      | "mintCommunityTokens"
      | "mintConsultantsTokens"
      | "mintLiquidityTokens"
      | "mintPartnershipsTokens"
      | "mintPresaleTokens"
      | "mintTeamTokens"
      | "name"
      | "nextRedemptionId"
      | "owner"
      | "pause"
      | "paused"
      | "presaleContractAddress"
      | "presaleEndTime"
      | "recordPurchase"
      | "redemptionExpiryPeriod"
      | "refundWaterRedemption"
      | "renounceOwnership"
      | "requestWaterRedemption"
      | "strategicPartnershipsWallet"
      | "symbol"
      | "totalCommunityAllocation"
      | "totalConsultantsAllocation"
      | "totalLiquidityAllocation"
      | "totalPartnershipsAllocation"
      | "totalPublicAllocation"
      | "totalSupply"
      | "totalTeamAllocation"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "updateDeliveryOperator"
      | "updateKycStatus"
      | "updatePresaleContract"
      | "updateRedemptionExpiryPeriod"
      | "updateWallets"
      | "waterRedemptions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "KycStatusUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PresaleContractUpdated"
      | "PresaleExtended"
      | "TokensPurchased"
      | "Transfer"
      | "Unpaused"
      | "WalletsUpdated"
      | "WaterRedeemed"
      | "WaterRedemptionCancelled"
      | "WaterRedemptionConfirmed"
      | "WaterRedemptionRefunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COMMUNITY_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONSULTANTS_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LIQUIDITY_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PARTNERSHIPS_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRESALE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PUBLIC_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TEAM_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REDEMPTION_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_ALLOCATION_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_PRICE_USD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_PRESALE_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateKycStatus",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWaterRedemption",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWaterDelivery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deliveryOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentTeamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWaterRedemptionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kycApproved",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityReserveWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintCommunityTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintConsultantsTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLiquidityTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPartnershipsTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPresaleTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTeamTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextRedemptionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordPurchase",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionExpiryPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundWaterRedemption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWaterRedemption",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategicPartnershipsWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalCommunityAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalConsultantsAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPartnershipsAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPublicAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTeamAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDeliveryOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKycStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePresaleContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRedemptionExpiryPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWallets",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "waterRedemptions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COMMUNITY_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONSULTANTS_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LIQUIDITY_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PARTNERSHIPS_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRESALE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PUBLIC_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TEAM_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REDEMPTION_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_ALLOCATION_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_PRICE_USD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_PRESALE_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateKycStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelWaterRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmWaterDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deliveryOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaterRedemptionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kycApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityReserveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCommunityTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintConsultantsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLiquidityTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPartnershipsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPresaleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTeamTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRedemptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundWaterRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWaterRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategicPartnershipsWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCommunityAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalConsultantsAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPartnershipsAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPublicAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTeamAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDeliveryOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKycStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePresaleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRedemptionExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waterRedemptions",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KycStatusUpdatedEvent {
  export type InputTuple = [user: AddressLike, status: boolean];
  export type OutputTuple = [user: string, status: boolean];
  export interface OutputObject {
    user: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PresaleContractUpdatedEvent {
  export type InputTuple = [
    oldPresaleContract: AddressLike,
    newPresaleContract: AddressLike
  ];
  export type OutputTuple = [
    oldPresaleContract: string,
    newPresaleContract: string
  ];
  export interface OutputObject {
    oldPresaleContract: string;
    newPresaleContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PresaleExtendedEvent {
  export type InputTuple = [oldEndTime: BigNumberish, newEndTime: BigNumberish];
  export type OutputTuple = [oldEndTime: bigint, newEndTime: bigint];
  export interface OutputObject {
    oldEndTime: bigint;
    newEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    amount: BigNumberish,
    paymentMethod: string
  ];
  export type OutputTuple = [
    buyer: string,
    amount: bigint,
    paymentMethod: string
  ];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
    paymentMethod: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletsUpdatedEvent {
  export type InputTuple = [
    newDevelopmentTeamWallet: AddressLike,
    newLiquidityReserveWallet: AddressLike,
    newStrategicPartnershipsWallet: AddressLike
  ];
  export type OutputTuple = [
    newDevelopmentTeamWallet: string,
    newLiquidityReserveWallet: string,
    newStrategicPartnershipsWallet: string
  ];
  export interface OutputObject {
    newDevelopmentTeamWallet: string;
    newLiquidityReserveWallet: string;
    newStrategicPartnershipsWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaterRedeemedEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    tokenAmount: BigNumberish,
    waterAmount: BigNumberish,
    redemptionId: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    tokenAmount: bigint,
    waterAmount: bigint,
    redemptionId: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    tokenAmount: bigint;
    waterAmount: bigint;
    redemptionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaterRedemptionCancelledEvent {
  export type InputTuple = [
    redemptionId: BigNumberish,
    redeemer: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    redemptionId: bigint,
    redeemer: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    redemptionId: bigint;
    redeemer: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaterRedemptionConfirmedEvent {
  export type InputTuple = [
    redemptionId: BigNumberish,
    redeemer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    redemptionId: bigint,
    redeemer: string,
    amount: bigint
  ];
  export interface OutputObject {
    redemptionId: bigint;
    redeemer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaterRedemptionRefundedEvent {
  export type InputTuple = [
    redemptionId: BigNumberish,
    redeemer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    redemptionId: bigint,
    redeemer: string,
    amount: bigint
  ];
  export interface OutputObject {
    redemptionId: bigint;
    redeemer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HanumanWaterTokenV2 extends BaseContract {
  connect(runner?: ContractRunner | null): HanumanWaterTokenV2;
  waitForDeployment(): Promise<this>;

  interface: HanumanWaterTokenV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_COMMUNITY_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MAX_CONSULTANTS_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MAX_LIQUIDITY_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MAX_PARTNERSHIPS_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MAX_PRESALE_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_PUBLIC_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MAX_TEAM_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MIN_REDEMPTION_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  PUBLIC_ALLOCATION_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  TOKEN_PRICE_USD: TypedContractMethod<[], [bigint], "view">;

  TOTAL_PRESALE_TOKENS: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  batchUpdateKycStatus: TypedContractMethod<
    [_addresses: AddressLike[], _status: boolean],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelWaterRedemption: TypedContractMethod<
    [redemptionId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  confirmWaterDelivery: TypedContractMethod<
    [redemptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deliveryOperator: TypedContractMethod<[], [string], "view">;

  developmentTeamWallet: TypedContractMethod<[], [string], "view">;

  extendPresale: TypedContractMethod<
    [_newEndTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getWaterRedemptionStatus: TypedContractMethod<
    [redemptionId: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, boolean] & {
        redeemer: string;
        amount: bigint;
        requestTime: bigint;
        expiryTime: bigint;
        delivered: boolean;
        cancelled: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;

  kycApproved: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  liquidityReserveWallet: TypedContractMethod<[], [string], "view">;

  mintCommunityTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintConsultantsTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintLiquidityTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintPartnershipsTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintPresaleTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintTeamTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextRedemptionId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  presaleContractAddress: TypedContractMethod<[], [string], "view">;

  presaleEndTime: TypedContractMethod<[], [bigint], "view">;

  recordPurchase: TypedContractMethod<
    [buyer: AddressLike, amount: BigNumberish, paymentMethod: string],
    [void],
    "nonpayable"
  >;

  redemptionExpiryPeriod: TypedContractMethod<[], [bigint], "view">;

  refundWaterRedemption: TypedContractMethod<
    [redemptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWaterRedemption: TypedContractMethod<
    [amount: BigNumberish, deliveryDetails: string],
    [bigint],
    "nonpayable"
  >;

  strategicPartnershipsWallet: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalCommunityAllocation: TypedContractMethod<[], [bigint], "view">;

  totalConsultantsAllocation: TypedContractMethod<[], [bigint], "view">;

  totalLiquidityAllocation: TypedContractMethod<[], [bigint], "view">;

  totalPartnershipsAllocation: TypedContractMethod<[], [bigint], "view">;

  totalPublicAllocation: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalTeamAllocation: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDeliveryOperator: TypedContractMethod<
    [_newDeliveryOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  updateKycStatus: TypedContractMethod<
    [_address: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  updatePresaleContract: TypedContractMethod<
    [_presaleContractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRedemptionExpiryPeriod: TypedContractMethod<
    [_newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWallets: TypedContractMethod<
    [
      _developmentTeamWallet: AddressLike,
      _liquidityReserveWallet: AddressLike,
      _strategicPartnershipsWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  waterRedemptions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, boolean, string] & {
        redeemer: string;
        amount: bigint;
        requestTime: bigint;
        expiryTime: bigint;
        delivered: boolean;
        cancelled: boolean;
        refunded: boolean;
        deliveryDetails: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COMMUNITY_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CONSULTANTS_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LIQUIDITY_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PARTNERSHIPS_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PRESALE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PUBLIC_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TEAM_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REDEMPTION_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_ALLOCATION_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_PRICE_USD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_PRESALE_TOKENS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchUpdateKycStatus"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelWaterRedemption"
  ): TypedContractMethod<
    [redemptionId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmWaterDelivery"
  ): TypedContractMethod<[redemptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deliveryOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "developmentTeamWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "extendPresale"
  ): TypedContractMethod<[_newEndTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getWaterRedemptionStatus"
  ): TypedContractMethod<
    [redemptionId: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, boolean] & {
        redeemer: string;
        amount: bigint;
        requestTime: bigint;
        expiryTime: bigint;
        delivered: boolean;
        cancelled: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "kycApproved"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityReserveWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintCommunityTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintConsultantsTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintLiquidityTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintPartnershipsTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintPresaleTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintTeamTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextRedemptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "presaleContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "presaleEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordPurchase"
  ): TypedContractMethod<
    [buyer: AddressLike, amount: BigNumberish, paymentMethod: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptionExpiryPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundWaterRedemption"
  ): TypedContractMethod<[redemptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWaterRedemption"
  ): TypedContractMethod<
    [amount: BigNumberish, deliveryDetails: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategicPartnershipsWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCommunityAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalConsultantsAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLiquidityAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPartnershipsAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPublicAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTeamAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeliveryOperator"
  ): TypedContractMethod<
    [_newDeliveryOperator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKycStatus"
  ): TypedContractMethod<
    [_address: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePresaleContract"
  ): TypedContractMethod<
    [_presaleContractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRedemptionExpiryPeriod"
  ): TypedContractMethod<[_newPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWallets"
  ): TypedContractMethod<
    [
      _developmentTeamWallet: AddressLike,
      _liquidityReserveWallet: AddressLike,
      _strategicPartnershipsWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "waterRedemptions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, boolean, string] & {
        redeemer: string;
        amount: bigint;
        requestTime: bigint;
        expiryTime: bigint;
        delivered: boolean;
        cancelled: boolean;
        refunded: boolean;
        deliveryDetails: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "KycStatusUpdated"
  ): TypedContractEvent<
    KycStatusUpdatedEvent.InputTuple,
    KycStatusUpdatedEvent.OutputTuple,
    KycStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PresaleContractUpdated"
  ): TypedContractEvent<
    PresaleContractUpdatedEvent.InputTuple,
    PresaleContractUpdatedEvent.OutputTuple,
    PresaleContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PresaleExtended"
  ): TypedContractEvent<
    PresaleExtendedEvent.InputTuple,
    PresaleExtendedEvent.OutputTuple,
    PresaleExtendedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WalletsUpdated"
  ): TypedContractEvent<
    WalletsUpdatedEvent.InputTuple,
    WalletsUpdatedEvent.OutputTuple,
    WalletsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WaterRedeemed"
  ): TypedContractEvent<
    WaterRedeemedEvent.InputTuple,
    WaterRedeemedEvent.OutputTuple,
    WaterRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "WaterRedemptionCancelled"
  ): TypedContractEvent<
    WaterRedemptionCancelledEvent.InputTuple,
    WaterRedemptionCancelledEvent.OutputTuple,
    WaterRedemptionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "WaterRedemptionConfirmed"
  ): TypedContractEvent<
    WaterRedemptionConfirmedEvent.InputTuple,
    WaterRedemptionConfirmedEvent.OutputTuple,
    WaterRedemptionConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "WaterRedemptionRefunded"
  ): TypedContractEvent<
    WaterRedemptionRefundedEvent.InputTuple,
    WaterRedemptionRefundedEvent.OutputTuple,
    WaterRedemptionRefundedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "KycStatusUpdated(address,bool)": TypedContractEvent<
      KycStatusUpdatedEvent.InputTuple,
      KycStatusUpdatedEvent.OutputTuple,
      KycStatusUpdatedEvent.OutputObject
    >;
    KycStatusUpdated: TypedContractEvent<
      KycStatusUpdatedEvent.InputTuple,
      KycStatusUpdatedEvent.OutputTuple,
      KycStatusUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PresaleContractUpdated(address,address)": TypedContractEvent<
      PresaleContractUpdatedEvent.InputTuple,
      PresaleContractUpdatedEvent.OutputTuple,
      PresaleContractUpdatedEvent.OutputObject
    >;
    PresaleContractUpdated: TypedContractEvent<
      PresaleContractUpdatedEvent.InputTuple,
      PresaleContractUpdatedEvent.OutputTuple,
      PresaleContractUpdatedEvent.OutputObject
    >;

    "PresaleExtended(uint256,uint256)": TypedContractEvent<
      PresaleExtendedEvent.InputTuple,
      PresaleExtendedEvent.OutputTuple,
      PresaleExtendedEvent.OutputObject
    >;
    PresaleExtended: TypedContractEvent<
      PresaleExtendedEvent.InputTuple,
      PresaleExtendedEvent.OutputTuple,
      PresaleExtendedEvent.OutputObject
    >;

    "TokensPurchased(address,uint256,string)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WalletsUpdated(address,address,address)": TypedContractEvent<
      WalletsUpdatedEvent.InputTuple,
      WalletsUpdatedEvent.OutputTuple,
      WalletsUpdatedEvent.OutputObject
    >;
    WalletsUpdated: TypedContractEvent<
      WalletsUpdatedEvent.InputTuple,
      WalletsUpdatedEvent.OutputTuple,
      WalletsUpdatedEvent.OutputObject
    >;

    "WaterRedeemed(address,uint256,uint256,uint256)": TypedContractEvent<
      WaterRedeemedEvent.InputTuple,
      WaterRedeemedEvent.OutputTuple,
      WaterRedeemedEvent.OutputObject
    >;
    WaterRedeemed: TypedContractEvent<
      WaterRedeemedEvent.InputTuple,
      WaterRedeemedEvent.OutputTuple,
      WaterRedeemedEvent.OutputObject
    >;

    "WaterRedemptionCancelled(uint256,address,uint256,string)": TypedContractEvent<
      WaterRedemptionCancelledEvent.InputTuple,
      WaterRedemptionCancelledEvent.OutputTuple,
      WaterRedemptionCancelledEvent.OutputObject
    >;
    WaterRedemptionCancelled: TypedContractEvent<
      WaterRedemptionCancelledEvent.InputTuple,
      WaterRedemptionCancelledEvent.OutputTuple,
      WaterRedemptionCancelledEvent.OutputObject
    >;

    "WaterRedemptionConfirmed(uint256,address,uint256)": TypedContractEvent<
      WaterRedemptionConfirmedEvent.InputTuple,
      WaterRedemptionConfirmedEvent.OutputTuple,
      WaterRedemptionConfirmedEvent.OutputObject
    >;
    WaterRedemptionConfirmed: TypedContractEvent<
      WaterRedemptionConfirmedEvent.InputTuple,
      WaterRedemptionConfirmedEvent.OutputTuple,
      WaterRedemptionConfirmedEvent.OutputObject
    >;

    "WaterRedemptionRefunded(uint256,address,uint256)": TypedContractEvent<
      WaterRedemptionRefundedEvent.InputTuple,
      WaterRedemptionRefundedEvent.OutputTuple,
      WaterRedemptionRefundedEvent.OutputObject
    >;
    WaterRedemptionRefunded: TypedContractEvent<
      WaterRedemptionRefundedEvent.InputTuple,
      WaterRedemptionRefundedEvent.OutputTuple,
      WaterRedemptionRefundedEvent.OutputObject
    >;
  };
}
